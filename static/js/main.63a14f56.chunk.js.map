{"version":3,"sources":["app_component/form.component.jsx","app_component/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["error","props","react_default","a","createElement","className","role","Form","onSubmit","loadweather","type","placeholder","name","autoComplete","Weather","cityname","concat","weatherIcon","temp_celsius","min","max","maxminTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","Api_Key","App","_this","Object","classCallCheck","this","_super","call","getWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","country","city","api_call","response","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","setState","sys","main","weather","celsius","calCelsius","temp","get_WeatherIcon","id","console","log","stop","_x","apply","arguments","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","Math","floor","form_component","weather_component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63a14f56.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props => { \r\n  return (\r\n    <div className=\"container h-100\">\r\n      <form onSubmit={props.loadweather}>\r\n        <div>{props.error ? error() : \"\"}</div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"City\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Country\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 mt-2 text-md-left \">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst error = props => {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country...!\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./weather.style.css\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"Card\">\r\n        <h1 className=\"text-white py-3\">{props.cityname}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n\r\n        {/* Get Celsius */}\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n\r\n        {/* show max and min temp */}\r\n        {maxminTemp(props.temp_min, props.temp_max)}\r\n\r\n        {/* Weather description */}\r\n        <h4 className=\"py-3\">\r\n          {props.description.charAt(0).toUpperCase() +\r\n            props.description.slice(1)}\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n\r\nfunction maxminTemp(min, max) {\r\n  if (max && min) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./app_component/form.component\";\r\nimport Weather from \"./app_component/weather.component\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// git project https://github.com/erikflowers/weather-icons\r\nimport \"weather-icons/css/weather-icons.css\";\r\n\r\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: undefined,\r\n      country: undefined,\r\n      icon: undefined,\r\n      main: undefined,\r\n      celsius: undefined,\r\n      temp_max: null,\r\n      temp_min: null,\r\n      description: \"\",\r\n      error: false\r\n    };\r\n\r\n    this.weatherIcon = {\r\n      Thunderstorm: \"wi-thunderstorm\",\r\n      Drizzle: \"wi-sleet\",\r\n      Rain: \"wi-storm-showers\",\r\n      Snow: \"wi-snow\",\r\n      Atmosphere: \"wi-fog\",\r\n      Clear: \"wi-day-sunny\",\r\n      Clouds: \"wi-day-fog\"\r\n    };\r\n  }\r\n\r\n  get_WeatherIcon(icons, rangeId) {\r\n    switch (true) {\r\n      case rangeId >= 200 && rangeId < 232:\r\n        this.setState({ icon: icons.Thunderstorm });\r\n        break;\r\n      case rangeId >= 300 && rangeId <= 321:\r\n        this.setState({ icon: icons.Drizzle });\r\n        break;\r\n      case rangeId >= 500 && rangeId <= 521:\r\n        this.setState({ icon: icons.Rain });\r\n        break;\r\n      case rangeId >= 600 && rangeId <= 622:\r\n        this.setState({ icon: icons.Snow });\r\n        break;\r\n      case rangeId >= 701 && rangeId <= 781:\r\n        this.setState({ icon: icons.Atmosphere });\r\n        break;\r\n      case rangeId === 800:\r\n        this.setState({ icon: icons.Clear });\r\n        break;\r\n      case rangeId >= 801 && rangeId <= 804:\r\n        this.setState({ icon: icons.Clouds });\r\n        break;\r\n      default:\r\n        this.setState({ icon: icons.Clouds });\r\n    }\r\n  }\r\n\r\n  calCelsius(temp) {\r\n    let cell = Math.floor(temp - 273.15);\r\n    return cell;\r\n  }\r\n\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n\r\n    const country = e.target.elements.country.value;\r\n    const city = e.target.elements.city.value;\r\n\r\n    if (country && city) {\r\n      const api_call = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\r\n      );\r\n\r\n      const response = await api_call.json();\r\n\r\n      this.setState({\r\n        city: `${response.name}, ${response.sys.country}`,\r\n        country: response.sys.country,\r\n        main: response.weather[0].main,\r\n        celsius: this.calCelsius(response.main.temp),\r\n        temp_max: this.calCelsius(response.main.temp_max),\r\n        temp_min: this.calCelsius(response.main.temp_min),\r\n        description: response.weather[0].description,\r\n        error: false\r\n      });\r\n\r\n      // seting icons\r\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\r\n\r\n      console.log(response);\r\n    } else {\r\n      this.setState({\r\n        error: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form loadweather={this.getWeather} error={this.state.error} />\r\n        <Weather\r\n          cityname={this.state.city}\r\n          weatherIcon={this.state.icon}\r\n          temp_celsius={this.state.celsius}\r\n          temp_max={this.state.temp_max}\r\n          temp_min={this.state.temp_min}\r\n          description={this.state.description}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}